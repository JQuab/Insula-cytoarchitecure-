%% Import data from text file
% Script for importing data from the following text file:
% Auto-generated by MATLAB on 05-May-2022 13:46:43

%% Set up the Import Options and import the data
opts = delimitedTextImportOptions("NumVariables", 11);

% Specify range and delimiter
opts.DataLines = [2, Inf];
opts.Delimiter = " ";

% Specify column names and types
opts.VariableNames = ["area", "bin1", "bin2", "bin3", "bin4", "bin5", "bin6", "bin7", "bin8", "bin9", "bin10"];
opts.VariableTypes = ["char", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double"];

% Specify file level properties
opts.ExtraColumnsRule = "ignore";
opts.EmptyLineRule = "read";
opts.ConsecutiveDelimitersRule = "join";
opts.LeadingDelimitersRule = "ignore";

% Specify variable properties
opts = setvaropts(opts, "area", "WhitespaceRule", "preserve");
opts = setvaropts(opts, "area", "EmptyFieldRule", "auto");

% Import the data
tab_data = readtable("Insula_10bins_grouped_by_area.txt", opts);


%% Clear temporary variables
clear opts


%% MDS

%>> Multidimensional scaling. Inputdata:  norm_data
%   Each line (row) in <norm_data> is one case (object)
%   A valid value for <dist_metric> must be defined (see m+'user').
%   Data with distance_matrix accepted
%   ----------------------------------------------------------------
%>> -cmdscale() performs classical multidimensional scaling (MDS).
%   -mdscale()  performs nonclassical MDS. As with cmdscale, use mdscale either to
%   visualize dissimilarity data for which no "locations" exist, or to visualize
%   high-dimensional data by reducing its dimensionality. Both take a matrix of
%   dissimilarities as an input and produce a configuration of points. mdscale offers a
%   choice of different criteria to construct the configuration, and allows missing data
%   and weights. -> mdscale(): Nonmetric and metric multidimensional scaling
%   -  By default, mdscale() uses Kruskal's normalized stress1 criterion
%   -  'Criterion'— The goodness-of-fit criterion to minimize:
%      'stress' — Stress normalized by the sum of squares of the interpoint distances,
%                 stress1. Default. Non-metric scaling !!
%      'metricstress' — Stress normalized with the sum of squares of the
%                 dissimilarities.  Metric scaling !!


raw_data=table2array(tab_data(:,2:end));
dist_metric='euclid';
mds_criterion='stress';

% Input are feature vectors, calculate distances
dissimilarities   =  pdist(raw_data,dist_metric); % dissimilarities: a vector!

%mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
opts = statset('MaxIter',2000');   %  Max number of iterations. Default = 200
[points_2d,stress,disparities] = ...
    mdscale(dissimilarities,2,'Criterion',mds_criterion,'Options',opts);
%mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
fprintf(1,'     Stress: %6.4f\n',stress);

% Make MDS-Plot
h_fig=figure(); 
grand_min = min(min(points_2d(:,1:2)));
grand_max = max(max(points_2d(:,1:2)));
x_shift = (grand_max-grand_min)/100;
plot(points_2d(:,1),points_2d(:,2),'b+', ...
    points_2d(:,1),points_2d(:,2),'ro');
set(gcf,'DefaulttextInterpreter','none')
set(gca,'FontSize',10);
set(gcf,'DefaulttextInterpreter','none')
case_names_c =tab_data.area;
text(points_2d(:,1)+x_shift,points_2d(:,2)-x_shift,case_names_c,'FontSize',10);
title  (['=MDS=  /  ' datestr(now) '  /  ' dist_metric ' / ' mds_criterion ': ' num2str(stress,'%8.6f')])
xlabel('Dimension 1'); ylabel('Dimension 2'); %'
axis square; axis on
% equal scale for both axes
xlim([-1.5 1.5]); ylim([-1.5 1.5]);

h_fig.WindowState = 'maximized';

% Requires R2020a or later
exportgraphics(h_fig,'plot.pdf','ContentType','vector')